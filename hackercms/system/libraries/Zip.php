<?php  if ( ! defined('BASEPATH')) exit('No direct script access allowed'); class CI_Zip { var $zipdata = ''; var $directory = ''; var $entries = 0; var $file_num = 0; var $offset = 0; var $now; public function __construct() { log_message('debug', "Zip Compression Class Initialized"); $this->now = time(); } function add_dir($directory) { foreach ((array)$directory as $dir) { if ( ! preg_match("|.+/$|", $dir)) { $dir .= '/'; } $dir_time = $this->_get_mod_time($dir); $this->_add_dir($dir, $dir_time['file_mtime'], $dir_time['file_mdate']); } } function _get_mod_time($dir) { $date = (@filemtime($dir)) ? filemtime($dir) : getdate($this->now); $time['file_mtime'] = ($date['hours'] << 11) + ($date['minutes'] << 5) + $date['seconds'] / 2; $time['file_mdate'] = (($date['year'] - 1980) << 9) + ($date['mon'] << 5) + $date['mday']; return $time; } function _add_dir($dir, $file_mtime, $file_mdate) { $dir = str_replace("\\", "/", $dir); $this->zipdata .= "\x50\x4b\x03\x04\x0a\x00\x00\x00\x00\x00" .pack('v', $file_mtime) .pack('v', $file_mdate) .pack('V', 0) .pack('V', 0) .pack('V', 0) .pack('v', strlen($dir)) .pack('v', 0) .$dir .pack('V', 0) .pack('V', 0) .pack('V', 0); $this->directory .= "\x50\x4b\x01\x02\x00\x00\x0a\x00\x00\x00\x00\x00" .pack('v', $file_mtime) .pack('v', $file_mdate) .pack('V',0) .pack('V',0) .pack('V',0) .pack('v', strlen($dir)) .pack('v', 0) .pack('v', 0) .pack('v', 0) .pack('v', 0) .pack('V', 16) .pack('V', $this->offset) .$dir; $this->offset = strlen($this->zipdata); $this->entries++; } function add_data($filepath, $data = NULL) { if (is_array($filepath)) { foreach ($filepath as $path => $data) { $file_data = $this->_get_mod_time($path); $this->_add_data($path, $data, $file_data['file_mtime'], $file_data['file_mdate']); } } else { $file_data = $this->_get_mod_time($filepath); $this->_add_data($filepath, $data, $file_data['file_mtime'], $file_data['file_mdate']); } } function _add_data($filepath, $data, $file_mtime, $file_mdate) { $filepath = str_replace("\\", "/", $filepath); $uncompressed_size = strlen($data); $crc32 = crc32($data); $gzdata = gzcompress($data); $gzdata = substr($gzdata, 2, -4); $compressed_size = strlen($gzdata); $this->zipdata .= "\x50\x4b\x03\x04\x14\x00\x00\x00\x08\x00" .pack('v', $file_mtime) .pack('v', $file_mdate) .pack('V', $crc32) .pack('V', $compressed_size) .pack('V', $uncompressed_size) .pack('v', strlen($filepath)) .pack('v', 0) .$filepath .$gzdata; $this->directory .= "\x50\x4b\x01\x02\x00\x00\x14\x00\x00\x00\x08\x00" .pack('v', $file_mtime) .pack('v', $file_mdate) .pack('V', $crc32) .pack('V', $compressed_size) .pack('V', $uncompressed_size) .pack('v', strlen($filepath)) .pack('v', 0) .pack('v', 0) .pack('v', 0) .pack('v', 0) .pack('V', 32) .pack('V', $this->offset) .$filepath; $this->offset = strlen($this->zipdata); $this->entries++; $this->file_num++; } function read_file($path, $preserve_filepath = FALSE) { if ( ! file_exists($path)) { return FALSE; } if (FALSE !== ($data = file_get_contents($path))) { $name = str_replace("\\", "/", $path); if ($preserve_filepath === FALSE) { $name = preg_replace("|.*/(.+)|", "\\1", $name); } $this->add_data($name, $data); return TRUE; } return FALSE; } function read_dir($path, $preserve_filepath = TRUE, $root_path = NULL) { if ( ! $fp = @opendir($path)) { return FALSE; } if ($root_path === NULL) { $root_path = dirname($path).'/'; } while (FALSE !== ($file = readdir($fp))) { if (substr($file, 0, 1) == '.') { continue; } if (@is_dir($path.$file)) { $this->read_dir($path.$file."/", $preserve_filepath, $root_path); } else { if (FALSE !== ($data = file_get_contents($path.$file))) { $name = str_replace("\\", "/", $path); if ($preserve_filepath === FALSE) { $name = str_replace($root_path, '', $name); } $this->add_data($name.$file, $data); } } } return TRUE; } function get_zip() { if ($this->entries == 0) { return FALSE; } $zip_data = $this->zipdata; $zip_data .= $this->directory."\x50\x4b\x05\x06\x00\x00\x00\x00"; $zip_data .= pack('v', $this->entries); $zip_data .= pack('v', $this->entries); $zip_data .= pack('V', strlen($this->directory)); $zip_data .= pack('V', strlen($this->zipdata)); $zip_data .= "\x00\x00"; return $zip_data; } function archive($filepath) { if ( ! ($fp = @fopen($filepath, FOPEN_WRITE_CREATE_DESTRUCTIVE))) { return FALSE; } flock($fp, LOCK_EX); fwrite($fp, $this->get_zip()); flock($fp, LOCK_UN); fclose($fp); return TRUE; } function download($filename = 'backup.zip') { if ( ! preg_match("|.+?\.zip$|", $filename)) { $filename .= '.zip'; } $CI =& get_instance(); $CI->load->helper('download'); $get_zip = $this->get_zip(); $zip_content =& $get_zip; force_download($filename, $zip_content); } function clear_data() { $this->zipdata = ''; $this->directory = ''; $this->entries = 0; $this->file_num = 0; $this->offset = 0; } } 